/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.7/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the java-library plugin for API and implementation separation.
    `java-library`
    checkstyle
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

val dynamodb by configurations.creating

dependencies {

    // DynamoDB testing
    dynamodb(fileTree("lib") { include(listOf("*.dylib", "*.so", "*.dll")) })
    dynamodb(libs.ddblocal)

    // This dependency is exported to consumers, that is to say found on their compile classpath.
    //api(libs.commons.math3)
    api(project(":ff"))
    api(project(":ddb"))

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation(libs.slf4j.api)
    implementation(libs.aws.sdk2.ddb)

    // Immutables
    compileOnly(libs.immutables.annotations)
    annotationProcessor(libs.immutables.value)

    testImplementation(project(":test"))
    testImplementation(libs.bundles.logback)
    testImplementation(libs.bundles.testing)
    testImplementation(libs.database.test)
    testImplementation(libs.ddblocal)
    testRuntimeOnly("org.junit.platform:junit-platform-launcher")
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
    withJavadocJar()
    withSourcesJar()
}

tasks.register("copyNativeDeps", Copy::class.java) {
    from(configurations.runtimeClasspath.get() + configurations.testRuntimeClasspath.get()) {
        include("*.dll", "*.dylib", "*.so")
    }.into("build/libs")
}

tasks.named<Test>("test") {
    dependsOn("copyNativeDeps")
    systemProperty("java.library.path", "build/libs")
    useJUnitPlatform()
}

